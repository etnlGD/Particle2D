#pragma once
#include <cstdint>

namespace particle2d
{
	// mixed linear congruential generator (MLCG)
	// numbers chosen according to L'Ecuyer, Commun. ACM 31 (1988) 742
	// period is somewhere around m-1
	class Randomizer
	{
		enum 
		{
			MERSENNE_PRIME = 2147483399,	// a non-Mersenne prime
			CONSTANT = 40692,				// another spectral success story
			DIV_RESULT = MERSENNE_PRIME / CONSTANT,
			MODULO_RESULT = MERSENNE_PRIME % CONSTANT,	// again less than q
			MAX_RAND = MERSENNE_PRIME - 1
		};

	public:
		Randomizer(int32_t seed = 0x0f0f0f0f);

		//! resets the randomizer
		void reset(int32_t seed);

		//! generates a pseudo random number in the range [0, randMax())
		int32_t rand();

		//! generates a pseudo random number in the range [0, max)
		int32_t rand(uint32_t max);

		//! generates a pseudo random number in the range [min, max)
		int32_t rand(uint32_t min, uint32_t max);

		bool brand();

		//! generates a pseudo random number in the range [0, 1)
		float frand();

		//! generates a pseudo random number in the range [0, max)
		float frand(float max);

		//! generates a pseudo random number in the range [min, max)
		float frand(float min, float max);

		//! get maxmimum number generated by rand()
		inline static int32_t randMax()
		{
			return MAX_RAND;
		}

		static Randomizer& shared()
		{
			static Randomizer sharedRandomizer;
			return sharedRandomizer;
		}

	private:
		int32_t seed;
	};

}

